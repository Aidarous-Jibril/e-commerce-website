{"ast":null,"code":"import { FETCH_COLLECTIONS_START, FETCH_COLLECTIONS_SUCCESS, FETCH_COLLECTIONS_FAILURE } from './types'; //WE USE REDUX THUNK MDDLEWARE FOR MULTPLE ACTIONS\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.Utils'; //Setting isFetching from falst to true when starting fetching \n\nexport const fetchCollectionsStart = () => ({\n  type: FETCH_COLLECTIONS_START\n}); //fetching success\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n}); //fetching failed\n\nexport const fetchCollectionsFailure = error => ({\n  type: FETCH_COLLECTIONS_FAILURE,\n  payload: error\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n/* MY FETCHING WAY  \r\nexport const fetchCollectionsStartAsync = () =>  dispatch => {\r\n    try {\r\n        dispatch(setLoading());\r\n        const collectionRef = firestore.collection('collections');\r\n    \r\n        collectionRef\r\n        .get()\r\n           .then (snapshot => {\r\n               const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch({\r\n                type: FETCH_COLLECTIONS_SUCCESS,\r\n                payload: collectionsMap\r\n            })\r\n        })        \r\n    } catch (error) {\r\n        dispatch({\r\n            type: FETCH_COLLECTIONS_FAILURE,\r\n            payload: error.message\r\n        })\r\n    }        \r\n};\r\n\r\n// Set loading to true\r\nexport const setLoading = () => {\r\n    return {\r\n      type: FETCH_COLLECTIONS_START\r\n    };\r\n  };\r\n*/","map":{"version":3,"sources":["C:\\Users\\aidar\\Desktop\\e-commerce-site\\src\\redux\\actions\\shopActions.js"],"names":["FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","fetchCollectionsSuccess","collectionsMap","payload","fetchCollectionsFailure","error","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","message"],"mappings":"AAAA,SACIA,uBADJ,EAEIC,yBAFJ,EAGIC,yBAHJ,QAIO,SAJP,C,CAMA;;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAA0D,+BAA1D,C,CAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEN;AADkC,CAAP,CAA9B,C,CAIP;;AACA,OAAO,MAAMO,uBAAuB,GAAGC,cAAc,KAAK;AAClDF,EAAAA,IAAI,EAAEL,yBAD4C;AAElDQ,EAAAA,OAAO,EAAED;AAFyC,CAAL,CAA9C,C,CAMP;;AACA,OAAO,MAAME,uBAAuB,GAAGC,KAAK,KAAK;AAC7CL,EAAAA,IAAI,EAAEJ,yBADuC;AAE7CO,EAAAA,OAAO,EAAEE;AAFoC,CAAL,CAArC;AAKP,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACjB,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACR,qBAAqB,EAAtB,CAAR;AAEAS,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,YAAMV,cAAc,GAAGJ,+BAA+B,CAACc,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACN,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALH,EAMGW,KANH,CAMSR,KAAK,IAAIE,QAAQ,CAACH,uBAAuB,CAACC,KAAK,CAACS,OAAP,CAAxB,CAN1B;AAOD,GAXD;AAYD,CAbI;AA0BP","sourcesContent":["import { \r\n    FETCH_COLLECTIONS_START, \r\n    FETCH_COLLECTIONS_SUCCESS, \r\n    FETCH_COLLECTIONS_FAILURE \r\n} from './types';\r\n\r\n//WE USE REDUX THUNK MDDLEWARE FOR MULTPLE ACTIONS\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.Utils'\r\n\r\n//Setting isFetching from falst to true when starting fetching \r\nexport const fetchCollectionsStart = () => ({\r\n    type: FETCH_COLLECTIONS_START\r\n})\r\n\r\n//fetching success\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n        type: FETCH_COLLECTIONS_SUCCESS,\r\n        payload: collectionsMap\r\n});\r\n\r\n\r\n//fetching failed\r\nexport const fetchCollectionsFailure = error => ({\r\n    type: FETCH_COLLECTIONS_FAILURE,\r\n    payload: error\r\n})\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n      const collectionRef = firestore.collection('collections');\r\n      dispatch(fetchCollectionsStart());\r\n  \r\n      collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n          const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n          dispatch(fetchCollectionsSuccess(collectionsMap));\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* MY FETCHING WAY  \r\nexport const fetchCollectionsStartAsync = () =>  dispatch => {\r\n    try {\r\n        dispatch(setLoading());\r\n        const collectionRef = firestore.collection('collections');\r\n    \r\n        collectionRef\r\n        .get()\r\n           .then (snapshot => {\r\n               const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch({\r\n                type: FETCH_COLLECTIONS_SUCCESS,\r\n                payload: collectionsMap\r\n            })\r\n        })        \r\n    } catch (error) {\r\n        dispatch({\r\n            type: FETCH_COLLECTIONS_FAILURE,\r\n            payload: error.message\r\n        })\r\n    }        \r\n};\r\n\r\n// Set loading to true\r\nexport const setLoading = () => {\r\n    return {\r\n      type: FETCH_COLLECTIONS_START\r\n    };\r\n  };\r\n*/"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { FETCH_COLLECTIONS_START, FETCH_COLLECTIONS_SUCCESS, FETCH_COLLECTIONS_FAILURE } from './types'; //WE USE REDUX THUNK MDDLEWARE IN THIS FILE\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.Utils';\nexport const fetchCollectionsStartAsync = () => dispatch => {\n  try {\n    dispatch(setLoading());\n    const collectionRef = firestore.collection('collections');\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch({\n        type: FETCH_COLLECTIONS_SUCCESS,\n        payload: collectionsMap\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_COLLECTIONS_FAILURE,\n      payload: error.message\n    });\n  } //  .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n}; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: FETCH_COLLECTIONS_START\n  };\n};\n/* Y sätt\r\n//fetching success\r\n//dispatch(fetchCollectionsSuccess(collectionsMap));\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n    type: FETCH_COLLECTIONS_SUCCESS,\r\n        payload: collectionsMap\r\n});\r\n\r\n//fetching failed\r\nexport const fetchCollectionsFailure = error => ({\r\n  type: FETCH_COLLECTIONS_FAILURE,\r\n  payload: error\r\n})\r\n*/","map":{"version":3,"sources":["C:\\Users\\aidar\\Desktop\\e-commerce-site\\src\\redux\\actions\\shopActions.js"],"names":["FETCH_COLLECTIONS_START","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStartAsync","dispatch","setLoading","collectionRef","collection","get","then","snapshot","collectionsMap","type","payload","error","message"],"mappings":"AAAA,SACIA,uBADJ,EAEIC,yBAFJ,EAGIC,yBAHJ,QAIO,SAJP,C,CAMA;;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAA0D,+BAA1D;AAIA,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,QAAQ,IAAI;AACzD,MAAI;AACAA,IAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;AACA,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEAD,IAAAA,aAAa,CACZE,GADD,GAEIC,IAFJ,CAEUC,QAAQ,IAAI;AACf,YAAMC,cAAc,GAAGT,+BAA+B,CAACQ,QAAD,CAAtD;AACHN,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEb,yBADD;AAELc,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CAAR;AAIH,KARD;AASH,GAbD,CAaE,OAAOG,KAAP,EAAc;AACZV,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEZ,yBADD;AAELa,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAFV,KAAD,CAAR;AAIH,GAnBwD,CAqBzD;;AAEH,CAvBM,C,CAyBP;;AACA,OAAO,MAAMV,UAAU,GAAG,MAAM;AAC5B,SAAO;AACHO,IAAAA,IAAI,EAAEd;AADH,GAAP;AAGD,CAJI;AAQL","sourcesContent":["import { \r\n    FETCH_COLLECTIONS_START, \r\n    FETCH_COLLECTIONS_SUCCESS, \r\n    FETCH_COLLECTIONS_FAILURE \r\n} from './types';\r\n\r\n//WE USE REDUX THUNK MDDLEWARE IN THIS FILE\r\n\r\nimport {firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase.Utils'\r\n\r\n\r\n\r\nexport const fetchCollectionsStartAsync = () =>  dispatch => {\r\n    try {\r\n        dispatch(setLoading());\r\n        const collectionRef = firestore.collection('collections');\r\n    \r\n        collectionRef\r\n        .get()\r\n           .then (snapshot => {\r\n               const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch({\r\n                type: FETCH_COLLECTIONS_SUCCESS,\r\n                payload: collectionsMap\r\n            })\r\n        })        \r\n    } catch (error) {\r\n        dispatch({\r\n            type: FETCH_COLLECTIONS_FAILURE,\r\n            payload: error.message\r\n        })\r\n    }\r\n    \r\n    //  .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    \r\n};\r\n\r\n// Set loading to true\r\nexport const setLoading = () => {\r\n    return {\r\n        type: FETCH_COLLECTIONS_START\r\n    };\r\n  };\r\n      \r\n  \r\n  \r\n  /* Y sätt\r\n  //fetching success\r\n  //dispatch(fetchCollectionsSuccess(collectionsMap));\r\n  export const fetchCollectionsSuccess = collectionsMap => ({\r\n      type: FETCH_COLLECTIONS_SUCCESS,\r\n          payload: collectionsMap\r\n  });\r\n  \r\n  //fetching failed\r\n  export const fetchCollectionsFailure = error => ({\r\n    type: FETCH_COLLECTIONS_FAILURE,\r\n    payload: error\r\n})\r\n*/"]},"metadata":{},"sourceType":"module"}